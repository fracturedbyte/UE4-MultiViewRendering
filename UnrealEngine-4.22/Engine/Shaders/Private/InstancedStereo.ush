// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved..

/*=============================================================================
	InstancedStereo.usf: Resolve which view uniforms in a stereo pair to use.
=============================================================================*/

#pragma once

// Explictly include view uniform buffers
#include "/Engine/Generated/UniformBuffers/View.ush"
#include "/Engine/Generated/UniformBuffers/InstancedView.ush"
#include "/Engine/Generated/UniformBuffers/InstancedView2.ush" // FB Bulgakov - Instanced Multi View Rendering

// ViewState, GetPrimaryView and GetInstancedView are generated by the shader compiler to ensure View uniform buffer changes are up to date.
// see GenerateInstancedStereoCode()
#include "/Engine/Generated/GeneratedInstancedStereo.ush"

static ViewState ResolvedView;

ViewState ResolveView()
{
	return GetPrimaryView();
}

#if INSTANCED_STEREO
// FB Bulgakov Begin - Instanced Multi View Rendering - Special offsets for vr and triple screen
static const float EyeOffsetScale[5] = { -1.0, 1.0, // VR
										-1.0, 0.0, 1.0 }; // Triple Screen
// FB Bulgakov End
#endif

// Generated for Metal in GeneratedInstancedStereo.usf
#if !COMPILER_METAL && (INSTANCED_STEREO || MOBILE_MULTI_VIEW)
ViewState ResolveView(uint ViewIndex)
{
	if (ViewIndex == 0)
	{
		return GetPrimaryView();
	}
	// FB Bulgakov Begin - Instanced Multi View Rendering
	else if (ViewIndex == 1)
	{
		return GetInstancedView();
	}
	else
	{
		return GetInstancedView2();
	}
	// FB Bulgakov End
}
#endif

bool IsInstancedStereo()
{
#if INSTANCED_STEREO
	return InstancedView_StereoPassIndex > 0;
#else
	return false;
#endif
}

uint GetEyeIndex(uint InstanceId)
{
#if INSTANCED_STEREO
	return IsInstancedStereo() ? (InstanceId % View.NumViews) : 0; // FB Bulgakov - Instanced Multi View Rendering
#else
	return 0;
#endif
}

uint GetInstanceId(uint InstanceId)
{
#if INSTANCED_STEREO
	return IsInstancedStereo() ? (InstanceId / View.NumViews) : InstanceId; // FB Bulgakov - Instanced Multi View Rendering
#else
	return InstanceId;
#endif
}

// FB Bulgakov Begin - Instanced Multi View Rendering
float2 ClipInstancingRendering(inout float4 Position, int EyeIndex)
{
	static const float4 EyeClipEdge[2] = { float4(1.0, 0.0, 0.0, 1.0), float4(-1.0, 0.0, 0.0, 1.0) };

	float2 OutClipDistances;
	OutClipDistances.x = dot(Position, EyeClipEdge[0]);
	OutClipDistances.y = dot(Position, EyeClipEdge[1]);

	// Scale and shift position
	float ViewRatio = 1.0 / View.NumViews;
	int EyeOffsetIndexShift = 2 * (View.NumViews - 2);
	Position.x *= ViewRatio * ResolvedView.HMDEyePaddingOffset;
#if INSTANCED_STEREO
	Position.x += (EyeOffsetScale[EyeOffsetIndexShift + EyeIndex] * Position.w) * (1.0f - ViewRatio * ResolvedView.HMDEyePaddingOffset);
#endif
	
	return OutClipDistances;
}
// FB Bulgakov End